buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url= 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

group = 'com.epherical.croptopia'
version = '1.0.0'

java {
    archivesBaseName = 'dyntrees-addon'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'official', version: '1.18.2'
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                 {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                dtcroptopia {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'dtcroptopia', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                dtcroptopia {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dir 'libs'
    }
    maven {
        url = "https://www.cursemaven.com"

    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.31'
    implementation (fg.deobf("com.epherical:croptopia:1.18.2"))
    implementation (fg.deobf("com.ferreusveritas:dyntrees-alpha1:1.18.2"))
    runtimeOnly(fg.deobf("curse.maven:cc-tweaked-282001:3770724"))

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "dtcroptopia",
                "Specification-Vendor"    : "Thonk",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Thonk",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')
